=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Nexus@HenryScheinOne.co.nz
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module OpenapiClient
  class SitesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a practice site
    # Deletes a practice site from the slipstream practice registry. Will also delete the owning organisation if this is the last practice in the organisation.
    # @param site_identifier [String] The PMS-specific id that uniquely identifies a physical practice site (What you call the site in your software)
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [PracticeSiteDeleted]
    def delete_site(site_identifier, opts = {})
      data, _status_code, _headers = delete_site_with_http_info(site_identifier, opts)
      data
    end

    # Delete a practice site
    # Deletes a practice site from the slipstream practice registry. Will also delete the owning organisation if this is the last practice in the organisation.
    # @param site_identifier [String] The PMS-specific id that uniquely identifies a physical practice site (What you call the site in your software)
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [Array<(PracticeSiteDeleted, Integer, Hash)>] PracticeSiteDeleted data, response status code and response headers
    def delete_site_with_http_info(site_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SitesApi.delete_site ...'
      end
      # verify the required parameter 'site_identifier' is set
      if @api_client.config.client_side_validation && site_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'site_identifier' when calling SitesApi.delete_site"
      end
      # resource path
      local_var_path = '/management/sites/{SiteIdentifier}'.sub('{' + 'SiteIdentifier' + '}', CGI.escape(site_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      header_params[:'X-Practice-Management-Software'] = opts[:'x_practice_management_software'] if !opts[:'x_practice_management_software'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PracticeSiteDeleted'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['azure_auth']

      new_options = opts.merge(
        :operation => :"SitesApi.delete_site",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SitesApi#delete_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get practice identity
    # Fetches the identity of a given practice in slipstream and API Keys which can be used on the other endpoints
    # @param site_identifier [String] The PMS-specific id that uniquely identifies a physical practice site (What you call the site in your software)
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [PracticeSiteIdentityWithKeys]
    def get_practice_site_identity_with_keys(site_identifier, opts = {})
      data, _status_code, _headers = get_practice_site_identity_with_keys_with_http_info(site_identifier, opts)
      data
    end

    # Get practice identity
    # Fetches the identity of a given practice in slipstream and API Keys which can be used on the other endpoints
    # @param site_identifier [String] The PMS-specific id that uniquely identifies a physical practice site (What you call the site in your software)
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [Array<(PracticeSiteIdentityWithKeys, Integer, Hash)>] PracticeSiteIdentityWithKeys data, response status code and response headers
    def get_practice_site_identity_with_keys_with_http_info(site_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SitesApi.get_practice_site_identity_with_keys ...'
      end
      # verify the required parameter 'site_identifier' is set
      if @api_client.config.client_side_validation && site_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'site_identifier' when calling SitesApi.get_practice_site_identity_with_keys"
      end
      # resource path
      local_var_path = '/management/sites/{SiteIdentifier}/identity'.sub('{' + 'SiteIdentifier' + '}', CGI.escape(site_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      header_params[:'X-Practice-Management-Software'] = opts[:'x_practice_management_software'] if !opts[:'x_practice_management_software'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PracticeSiteIdentityWithKeys'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['azure_auth']

      new_options = opts.merge(
        :operation => :"SitesApi.get_practice_site_identity_with_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SitesApi#get_practice_site_identity_with_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Practice Sites
    # Lists practice sites in the slipstream practice registry
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The page number to retrieve
    # @option opts [String] :next_page_token A token retrieved from a previous request, used to retrieve the next page of results
    # @option opts [Array<String>] :sites The slugs of the sites to return
    # @option opts [Array<String>] :owning_organisations The slugs of the owning organisation to return sites for
    # @option opts [Array<String>] :billing_organisations The slugs of the billing organisation to return sites for
    # @option opts [Array<String>] :countries The countries to return sites for
    # @option opts [Boolean] :is_active Filter active or inactive sites. Omit to return active sites only.
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [PracticeSiteListResponse]
    def list_practice_sites(opts = {})
      data, _status_code, _headers = list_practice_sites_with_http_info(opts)
      data
    end

    # List Practice Sites
    # Lists practice sites in the slipstream practice registry
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The page number to retrieve
    # @option opts [String] :next_page_token A token retrieved from a previous request, used to retrieve the next page of results
    # @option opts [Array<String>] :sites The slugs of the sites to return
    # @option opts [Array<String>] :owning_organisations The slugs of the owning organisation to return sites for
    # @option opts [Array<String>] :billing_organisations The slugs of the billing organisation to return sites for
    # @option opts [Array<String>] :countries The countries to return sites for
    # @option opts [Boolean] :is_active Filter active or inactive sites. Omit to return active sites only.
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [Array<(PracticeSiteListResponse, Integer, Hash)>] PracticeSiteListResponse data, response status code and response headers
    def list_practice_sites_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SitesApi.list_practice_sites ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 50
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SitesApi.list_practice_sites, must be smaller than or equal to 50.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SitesApi.list_practice_sites, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'nextPageToken'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?
      query_params[:'Sites'] = @api_client.build_collection_param(opts[:'sites'], :multi) if !opts[:'sites'].nil?
      query_params[:'OwningOrganisations'] = @api_client.build_collection_param(opts[:'owning_organisations'], :multi) if !opts[:'owning_organisations'].nil?
      query_params[:'BillingOrganisations'] = @api_client.build_collection_param(opts[:'billing_organisations'], :multi) if !opts[:'billing_organisations'].nil?
      query_params[:'Countries'] = @api_client.build_collection_param(opts[:'countries'], :multi) if !opts[:'countries'].nil?
      query_params[:'isActive'] = opts[:'is_active'] if !opts[:'is_active'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      header_params[:'X-Practice-Management-Software'] = opts[:'x_practice_management_software'] if !opts[:'x_practice_management_software'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PracticeSiteListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['azure_auth']

      new_options = opts.merge(
        :operation => :"SitesApi.list_practice_sites",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SitesApi#list_practice_sites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upsert practice site
    # Creates a practice site in the slipstream practice registry and returns a unique identifier and API Keys which can be used on the site APIs
    # @param site_identifier [String] The PMS-specific id that uniquely identifies a physical practice site (What you call the site in your software)
    # @param practice_site_onboarding_request [PracticeSiteOnboardingRequest] The details of the practice to onboard
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [PracticeSiteIdentityWithKeys]
    def onboard_site(site_identifier, practice_site_onboarding_request, opts = {})
      data, _status_code, _headers = onboard_site_with_http_info(site_identifier, practice_site_onboarding_request, opts)
      data
    end

    # Upsert practice site
    # Creates a practice site in the slipstream practice registry and returns a unique identifier and API Keys which can be used on the site APIs
    # @param site_identifier [String] The PMS-specific id that uniquely identifies a physical practice site (What you call the site in your software)
    # @param practice_site_onboarding_request [PracticeSiteOnboardingRequest] The details of the practice to onboard
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [Array<(PracticeSiteIdentityWithKeys, Integer, Hash)>] PracticeSiteIdentityWithKeys data, response status code and response headers
    def onboard_site_with_http_info(site_identifier, practice_site_onboarding_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SitesApi.onboard_site ...'
      end
      # verify the required parameter 'site_identifier' is set
      if @api_client.config.client_side_validation && site_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'site_identifier' when calling SitesApi.onboard_site"
      end
      # verify the required parameter 'practice_site_onboarding_request' is set
      if @api_client.config.client_side_validation && practice_site_onboarding_request.nil?
        fail ArgumentError, "Missing the required parameter 'practice_site_onboarding_request' when calling SitesApi.onboard_site"
      end
      # resource path
      local_var_path = '/management/sites/{SiteIdentifier}'.sub('{' + 'SiteIdentifier' + '}', CGI.escape(site_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Practice-Management-Software'] = opts[:'x_practice_management_software'] if !opts[:'x_practice_management_software'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(practice_site_onboarding_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PracticeSiteIdentityWithKeys'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['azure_auth']

      new_options = opts.merge(
        :operation => :"SitesApi.onboard_site",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SitesApi#onboard_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
