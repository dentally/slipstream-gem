=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Nexus@HenryScheinOne.co.nz
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module SlipstreamconfigYamlClient
  class OrganisationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an organisation
    # Deletes an organisation from the slipstream practice registry. Will fail if the organisation owns any practice sites - delete the sites first
    # @param organisation_identifier [String] The PMS-specific id that uniquely identifies an organisation (What you call the organisation in your software), which owns one or more practice sites
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [String]
    def delete_organisation(organisation_identifier, opts = {})
      data, _status_code, _headers = delete_organisation_with_http_info(organisation_identifier, opts)
      data
    end

    # Delete an organisation
    # Deletes an organisation from the slipstream practice registry. Will fail if the organisation owns any practice sites - delete the sites first
    # @param organisation_identifier [String] The PMS-specific id that uniquely identifies an organisation (What you call the organisation in your software), which owns one or more practice sites
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def delete_organisation_with_http_info(organisation_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganisationsApi.delete_organisation ...'
      end
      # verify the required parameter 'organisation_identifier' is set
      if @api_client.config.client_side_validation && organisation_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'organisation_identifier' when calling OrganisationsApi.delete_organisation"
      end
      # resource path
      local_var_path = '/management/organisations/{OrganisationIdentifier}'.sub('{' + 'OrganisationIdentifier' + '}', CGI.escape(organisation_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      header_params[:'X-Practice-Management-Software'] = opts[:'x_practice_management_software'] if !opts[:'x_practice_management_software'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['azure_auth']

      new_options = opts.merge(
        :operation => :"OrganisationsApi.delete_organisation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganisationsApi#delete_organisation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organisation
    # Fetches the details of a given organisation in slipstream
    # @param organisation_identifier [String] The PMS-specific id that uniquely identifies an organisation (What you call the organisation in your software), which owns one or more practice sites
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [OrganisationDetails]
    def get_organisation(organisation_identifier, opts = {})
      data, _status_code, _headers = get_organisation_with_http_info(organisation_identifier, opts)
      data
    end

    # Get an organisation
    # Fetches the details of a given organisation in slipstream
    # @param organisation_identifier [String] The PMS-specific id that uniquely identifies an organisation (What you call the organisation in your software), which owns one or more practice sites
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [Array<(OrganisationDetails, Integer, Hash)>] OrganisationDetails data, response status code and response headers
    def get_organisation_with_http_info(organisation_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganisationsApi.get_organisation ...'
      end
      # verify the required parameter 'organisation_identifier' is set
      if @api_client.config.client_side_validation && organisation_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'organisation_identifier' when calling OrganisationsApi.get_organisation"
      end
      # resource path
      local_var_path = '/management/organisations/{OrganisationIdentifier}'.sub('{' + 'OrganisationIdentifier' + '}', CGI.escape(organisation_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      header_params[:'X-Practice-Management-Software'] = opts[:'x_practice_management_software'] if !opts[:'x_practice_management_software'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganisationDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['azure_auth']

      new_options = opts.merge(
        :operation => :"OrganisationsApi.get_organisation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganisationsApi#get_organisation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organisation identity
    # Fetches the identity of a given organisation in slipstream
    # @param organisation_identifier [String] The PMS-specific id that uniquely identifies an organisation (What you call the organisation in your software), which owns one or more practice sites
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [OrganisationIdentity]
    def get_organisation_identity(organisation_identifier, opts = {})
      data, _status_code, _headers = get_organisation_identity_with_http_info(organisation_identifier, opts)
      data
    end

    # Get organisation identity
    # Fetches the identity of a given organisation in slipstream
    # @param organisation_identifier [String] The PMS-specific id that uniquely identifies an organisation (What you call the organisation in your software), which owns one or more practice sites
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [Array<(OrganisationIdentity, Integer, Hash)>] OrganisationIdentity data, response status code and response headers
    def get_organisation_identity_with_http_info(organisation_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganisationsApi.get_organisation_identity ...'
      end
      # verify the required parameter 'organisation_identifier' is set
      if @api_client.config.client_side_validation && organisation_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'organisation_identifier' when calling OrganisationsApi.get_organisation_identity"
      end
      # resource path
      local_var_path = '/management/organisations/{OrganisationIdentifier}/identity'.sub('{' + 'OrganisationIdentifier' + '}', CGI.escape(organisation_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      header_params[:'X-Practice-Management-Software'] = opts[:'x_practice_management_software'] if !opts[:'x_practice_management_software'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganisationIdentity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['azure_auth']

      new_options = opts.merge(
        :operation => :"OrganisationsApi.get_organisation_identity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganisationsApi#get_organisation_identity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upsert organisation
    # Creates or updates an organisation in the slipstream practice registry and returns a unique identifier
    # @param organisation_identifier [String] The PMS-specific id that uniquely identifies an organisation (What you call the organisation in your software), which owns one or more practice sites
    # @param organisation_onboarding_request [OrganisationOnboardingRequest] The details of the organisation to onboard
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [OrganisationIdentity]
    def onboard_organisation(organisation_identifier, organisation_onboarding_request, opts = {})
      data, _status_code, _headers = onboard_organisation_with_http_info(organisation_identifier, organisation_onboarding_request, opts)
      data
    end

    # Upsert organisation
    # Creates or updates an organisation in the slipstream practice registry and returns a unique identifier
    # @param organisation_identifier [String] The PMS-specific id that uniquely identifies an organisation (What you call the organisation in your software), which owns one or more practice sites
    # @param organisation_onboarding_request [OrganisationOnboardingRequest] The details of the organisation to onboard
    # @param [Hash] opts the optional parameters
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [Array<(OrganisationIdentity, Integer, Hash)>] OrganisationIdentity data, response status code and response headers
    def onboard_organisation_with_http_info(organisation_identifier, organisation_onboarding_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganisationsApi.onboard_organisation ...'
      end
      # verify the required parameter 'organisation_identifier' is set
      if @api_client.config.client_side_validation && organisation_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'organisation_identifier' when calling OrganisationsApi.onboard_organisation"
      end
      # verify the required parameter 'organisation_onboarding_request' is set
      if @api_client.config.client_side_validation && organisation_onboarding_request.nil?
        fail ArgumentError, "Missing the required parameter 'organisation_onboarding_request' when calling OrganisationsApi.onboard_organisation"
      end
      # resource path
      local_var_path = '/management/organisations/{OrganisationIdentifier}'.sub('{' + 'OrganisationIdentifier' + '}', CGI.escape(organisation_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Practice-Management-Software'] = opts[:'x_practice_management_software'] if !opts[:'x_practice_management_software'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(organisation_onboarding_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganisationIdentity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['azure_auth']

      new_options = opts.merge(
        :operation => :"OrganisationsApi.onboard_organisation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganisationsApi#onboard_organisation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
