=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Bifrost@HenryScheinOne.com
Generated by: https://openapi-generator.tech
Generator version: 7.15.0

=end

require 'date'
require 'time'

module SlipstreamClient
  # Online booking details of a practice site.
  class OnlineBookingSiteDetails
    attr_accessor :site_slug

    # Unique identifier for the client, used for integration purposes
    attr_accessor :client_identifier

    attr_accessor :software

    # Unique identifier for the organisation, used for integration purposes
    attr_accessor :client_subscription_id

    # Unique identifier for the client, used for integration purposes
    attr_accessor :client_unique_id

    # Unique identifier for the organisation, used for integration purposes
    attr_accessor :name

    attr_accessor :is_active

    attr_accessor :timezone

    attr_accessor :country

    attr_accessor :scheduler_location_id

    attr_accessor :scheduler_company_id

    attr_accessor :created_on

    attr_accessor :last_updated_on

    attr_accessor :last_polling_item_timestamp

    attr_accessor :last_polling_check_timestamp

    attr_accessor :use_provider_availability

    attr_accessor :use_direct_booking

    attr_accessor :use_new_cx_api_version

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'site_slug' => :'SiteSlug',
        :'client_identifier' => :'ClientIdentifier',
        :'software' => :'Software',
        :'client_subscription_id' => :'ClientSubscriptionId',
        :'client_unique_id' => :'ClientUniqueId',
        :'name' => :'Name',
        :'is_active' => :'IsActive',
        :'timezone' => :'Timezone',
        :'country' => :'Country',
        :'scheduler_location_id' => :'SchedulerLocationId',
        :'scheduler_company_id' => :'SchedulerCompanyId',
        :'created_on' => :'CreatedOn',
        :'last_updated_on' => :'LastUpdatedOn',
        :'last_polling_item_timestamp' => :'LastPollingItemTimestamp',
        :'last_polling_check_timestamp' => :'LastPollingCheckTimestamp',
        :'use_provider_availability' => :'UseProviderAvailability',
        :'use_direct_booking' => :'UseDirectBooking',
        :'use_new_cx_api_version' => :'UseNewCxApiVersion'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'site_slug' => :'String',
        :'client_identifier' => :'String',
        :'software' => :'PracticeManagementSoftware',
        :'client_subscription_id' => :'String',
        :'client_unique_id' => :'String',
        :'name' => :'String',
        :'is_active' => :'Boolean',
        :'timezone' => :'String',
        :'country' => :'String',
        :'scheduler_location_id' => :'Integer',
        :'scheduler_company_id' => :'Integer',
        :'created_on' => :'Time',
        :'last_updated_on' => :'Time',
        :'last_polling_item_timestamp' => :'Time',
        :'last_polling_check_timestamp' => :'Time',
        :'use_provider_availability' => :'Boolean',
        :'use_direct_booking' => :'Boolean',
        :'use_new_cx_api_version' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'site_slug',
        :'client_subscription_id',
        :'client_unique_id',
        :'name',
        :'is_active',
        :'timezone',
        :'country',
        :'scheduler_location_id',
        :'scheduler_company_id',
        :'created_on',
        :'last_updated_on',
        :'last_polling_item_timestamp',
        :'last_polling_check_timestamp',
        :'use_provider_availability',
        :'use_direct_booking',
        :'use_new_cx_api_version'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SlipstreamClient::OnlineBookingSiteDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SlipstreamClient::OnlineBookingSiteDetails`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'site_slug')
        self.site_slug = attributes[:'site_slug']
      end

      if attributes.key?(:'client_identifier')
        self.client_identifier = attributes[:'client_identifier']
      end

      if attributes.key?(:'software')
        self.software = attributes[:'software']
      end

      if attributes.key?(:'client_subscription_id')
        self.client_subscription_id = attributes[:'client_subscription_id']
      end

      if attributes.key?(:'client_unique_id')
        self.client_unique_id = attributes[:'client_unique_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'is_active')
        self.is_active = attributes[:'is_active']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'scheduler_location_id')
        self.scheduler_location_id = attributes[:'scheduler_location_id']
      end

      if attributes.key?(:'scheduler_company_id')
        self.scheduler_company_id = attributes[:'scheduler_company_id']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'last_updated_on')
        self.last_updated_on = attributes[:'last_updated_on']
      end

      if attributes.key?(:'last_polling_item_timestamp')
        self.last_polling_item_timestamp = attributes[:'last_polling_item_timestamp']
      end

      if attributes.key?(:'last_polling_check_timestamp')
        self.last_polling_check_timestamp = attributes[:'last_polling_check_timestamp']
      end

      if attributes.key?(:'use_provider_availability')
        self.use_provider_availability = attributes[:'use_provider_availability']
      end

      if attributes.key?(:'use_direct_booking')
        self.use_direct_booking = attributes[:'use_direct_booking']
      end

      if attributes.key?(:'use_new_cx_api_version')
        self.use_new_cx_api_version = attributes[:'use_new_cx_api_version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          site_slug == o.site_slug &&
          client_identifier == o.client_identifier &&
          software == o.software &&
          client_subscription_id == o.client_subscription_id &&
          client_unique_id == o.client_unique_id &&
          name == o.name &&
          is_active == o.is_active &&
          timezone == o.timezone &&
          country == o.country &&
          scheduler_location_id == o.scheduler_location_id &&
          scheduler_company_id == o.scheduler_company_id &&
          created_on == o.created_on &&
          last_updated_on == o.last_updated_on &&
          last_polling_item_timestamp == o.last_polling_item_timestamp &&
          last_polling_check_timestamp == o.last_polling_check_timestamp &&
          use_provider_availability == o.use_provider_availability &&
          use_direct_booking == o.use_direct_booking &&
          use_new_cx_api_version == o.use_new_cx_api_version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [site_slug, client_identifier, software, client_subscription_id, client_unique_id, name, is_active, timezone, country, scheduler_location_id, scheduler_company_id, created_on, last_updated_on, last_polling_item_timestamp, last_polling_check_timestamp, use_provider_availability, use_direct_booking, use_new_cx_api_version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SlipstreamClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
