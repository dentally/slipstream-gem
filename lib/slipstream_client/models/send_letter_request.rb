=begin
#Practice -> Cloud API (Physical Post, SMS, Billing, and Authentication)

#Practice -> Cloud API containing only Authentication, Physical Post, SMS, Billing, and webhook endpoints

The version of the OpenAPI document: 1.0.0
Contact: Bifrost@HenryScheinOne.com
Generated by: https://openapi-generator.tech
Generator version: 7.15.0

=end

require 'date'
require 'time'

module SlipstreamClient
  class SendLetterRequest
    # Whether the letter should be sent by express delivery. If omitted, the default is standard delivery.
    attr_accessor :express

    # Whether the letter should be single or double sided. If omitted, the default is single sided.
    attr_accessor :double_sided

    # Whether the letter should be printed in color. If omitted, the default is black and white.
    attr_accessor :color

    # The unique ID of the letter in the pms system
    attr_accessor :pms_specific_id

    # The date to send the letter - omit or blank to send immediately
    attr_accessor :scheduled_send_date

    attr_accessor :addressee

    attr_accessor :address

    attr_accessor :pdf

    # Whether to skip address validation of the recipient address
    attr_accessor :skip_address_validation

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'express' => :'Express',
        :'double_sided' => :'DoubleSided',
        :'color' => :'Color',
        :'pms_specific_id' => :'PmsSpecificId',
        :'scheduled_send_date' => :'ScheduledSendDate',
        :'addressee' => :'Addressee',
        :'address' => :'Address',
        :'pdf' => :'Pdf',
        :'skip_address_validation' => :'SkipAddressValidation'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'express' => :'Boolean',
        :'double_sided' => :'Boolean',
        :'color' => :'Boolean',
        :'pms_specific_id' => :'String',
        :'scheduled_send_date' => :'Time',
        :'addressee' => :'Addressee',
        :'address' => :'StreetAddress',
        :'pdf' => :'DataUri',
        :'skip_address_validation' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'express',
        :'double_sided',
        :'color',
        :'addressee',
        :'skip_address_validation'
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'LetterProperties'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SlipstreamClient::SendLetterRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SlipstreamClient::SendLetterRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'express')
        self.express = attributes[:'express']
      end

      if attributes.key?(:'double_sided')
        self.double_sided = attributes[:'double_sided']
      end

      if attributes.key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.key?(:'pms_specific_id')
        self.pms_specific_id = attributes[:'pms_specific_id']
      else
        self.pms_specific_id = nil
      end

      if attributes.key?(:'scheduled_send_date')
        self.scheduled_send_date = attributes[:'scheduled_send_date']
      end

      if attributes.key?(:'addressee')
        self.addressee = attributes[:'addressee']
      else
        self.addressee = nil
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      else
        self.address = nil
      end

      if attributes.key?(:'pdf')
        self.pdf = attributes[:'pdf']
      else
        self.pdf = nil
      end

      if attributes.key?(:'skip_address_validation')
        self.skip_address_validation = attributes[:'skip_address_validation']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @pms_specific_id.nil?
        invalid_properties.push('invalid value for "pms_specific_id", pms_specific_id cannot be nil.')
      end

      if @address.nil?
        invalid_properties.push('invalid value for "address", address cannot be nil.')
      end

      if @pdf.nil?
        invalid_properties.push('invalid value for "pdf", pdf cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @pms_specific_id.nil?
      return false if @address.nil?
      return false if @pdf.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] pms_specific_id Value to be assigned
    def pms_specific_id=(pms_specific_id)
      if pms_specific_id.nil?
        fail ArgumentError, 'pms_specific_id cannot be nil'
      end

      @pms_specific_id = pms_specific_id
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if address.nil?
        fail ArgumentError, 'address cannot be nil'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] pdf Value to be assigned
    def pdf=(pdf)
      if pdf.nil?
        fail ArgumentError, 'pdf cannot be nil'
      end

      @pdf = pdf
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          express == o.express &&
          double_sided == o.double_sided &&
          color == o.color &&
          pms_specific_id == o.pms_specific_id &&
          scheduled_send_date == o.scheduled_send_date &&
          addressee == o.addressee &&
          address == o.address &&
          pdf == o.pdf &&
          skip_address_validation == o.skip_address_validation
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [express, double_sided, color, pms_specific_id, scheduled_send_date, addressee, address, pdf, skip_address_validation].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SlipstreamClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
