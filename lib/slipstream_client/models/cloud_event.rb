=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Nexus@HenryScheinOne.co.nz
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module SlipstreamClient
  class CloudEvent
    # [The version of the CloudEvents specification which the event uses](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion)
    attr_accessor :specversion

    # [Identifies the event. Producers MUST ensure that source + id is unique for each distinct event.](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id)
    attr_accessor :id

    # [A URI identifying the source of the event](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1)
    attr_accessor :source

    # [Describes the subject of the event in the context of the event producer (identified by source)](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1)
    attr_accessor :subject

    # [The identifier for the type of event](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type)
    attr_accessor :type

    # [Timestamp when the event occurred](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#time)
    attr_accessor :time

    # [The content type of the data field](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#datacontenttype). Assume application/json if missing
    attr_accessor :datacontenttype

    # [Identifies the schema that data adheres to](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#datacontenttype)
    attr_accessor :dataschema

    # [The event payload formatted as a json string](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#event-data)
    attr_accessor :data

    # The slug of the practice site the event pertains to.
    attr_accessor :siteslug

    # [The deadline for the event to be delivered. Discarded if not delivered by this time.](https://github.com/cloudevents/spec/blob/main/cloudevents/extensions/expirytime.md)
    attr_accessor :expirytime

    # The time the event is intended to be delivered at. Not delivered before this time.
    attr_accessor :intendeddeliverytime

    # [The correlation ID for correlating events](https://github.com/cloudevents/spec/blob/main/cloudevents/extensions/distributed-tracing.md)
    attr_accessor :traceparent

    # Priority of the event for time-sensitive processing.
    attr_accessor :priority

    # The slug representing the organisation the event pertains to.
    attr_accessor :organisationslug

    # The slug for the organisation to be billed for the event.
    attr_accessor :billingorganisationslug

    attr_accessor :product

    # [A URI using the valet-key pattern to retrieve full data](https://github.com/cloudevents/spec/blob/main/cloudevents/extensions/dataref.md)
    attr_accessor :dataref

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'specversion' => :'specversion',
        :'id' => :'Id',
        :'source' => :'source',
        :'subject' => :'subject',
        :'type' => :'type',
        :'time' => :'time',
        :'datacontenttype' => :'datacontenttype',
        :'dataschema' => :'dataschema',
        :'data' => :'data',
        :'siteslug' => :'siteslug',
        :'expirytime' => :'expirytime',
        :'intendeddeliverytime' => :'intendeddeliverytime',
        :'traceparent' => :'traceparent',
        :'priority' => :'priority',
        :'organisationslug' => :'organisationslug',
        :'billingorganisationslug' => :'billingorganisationslug',
        :'product' => :'product',
        :'dataref' => :'dataref'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'specversion' => :'String',
        :'id' => :'String',
        :'source' => :'String',
        :'subject' => :'String',
        :'type' => :'String',
        :'time' => :'Time',
        :'datacontenttype' => :'String',
        :'dataschema' => :'String',
        :'data' => :'Object',
        :'siteslug' => :'String',
        :'expirytime' => :'Time',
        :'intendeddeliverytime' => :'Time',
        :'traceparent' => :'String',
        :'priority' => :'Integer',
        :'organisationslug' => :'String',
        :'billingorganisationslug' => :'String',
        :'product' => :'PracticeManagementSoftware',
        :'dataref' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'subject',
        :'time',
        :'datacontenttype',
        :'dataschema',
        :'data',
        :'siteslug',
        :'expirytime',
        :'intendeddeliverytime',
        :'traceparent',
        :'priority',
        :'organisationslug',
        :'billingorganisationslug',
        :'dataref'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SlipstreamClient::CloudEvent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SlipstreamClient::CloudEvent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'specversion')
        self.specversion = attributes[:'specversion']
      else
        self.specversion = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      else
        self.source = nil
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'time')
        self.time = attributes[:'time']
      end

      if attributes.key?(:'datacontenttype')
        self.datacontenttype = attributes[:'datacontenttype']
      end

      if attributes.key?(:'dataschema')
        self.dataschema = attributes[:'dataschema']
      end

      if attributes.key?(:'data')
        self.data = attributes[:'data']
      end

      if attributes.key?(:'siteslug')
        self.siteslug = attributes[:'siteslug']
      end

      if attributes.key?(:'expirytime')
        self.expirytime = attributes[:'expirytime']
      end

      if attributes.key?(:'intendeddeliverytime')
        self.intendeddeliverytime = attributes[:'intendeddeliverytime']
      end

      if attributes.key?(:'traceparent')
        self.traceparent = attributes[:'traceparent']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'organisationslug')
        self.organisationslug = attributes[:'organisationslug']
      end

      if attributes.key?(:'billingorganisationslug')
        self.billingorganisationslug = attributes[:'billingorganisationslug']
      end

      if attributes.key?(:'product')
        self.product = attributes[:'product']
      end

      if attributes.key?(:'dataref')
        self.dataref = attributes[:'dataref']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @specversion.nil?
        invalid_properties.push('invalid value for "specversion", specversion cannot be nil.')
      end

      if @source.nil?
        invalid_properties.push('invalid value for "source", source cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @specversion.nil?
      return false if @source.nil?
      return false if @type.nil?
      priority_validator = EnumAttributeValidator.new('Integer', [0, 1, 2])
      return false unless priority_validator.valid?(@priority)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] priority Object to be assigned
    def priority=(priority)
      validator = EnumAttributeValidator.new('Integer', [0, 1, 2])
      unless validator.valid?(priority)
        fail ArgumentError, "invalid value for \"priority\", must be one of #{validator.allowable_values}."
      end
      @priority = priority
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          specversion == o.specversion &&
          id == o.id &&
          source == o.source &&
          subject == o.subject &&
          type == o.type &&
          time == o.time &&
          datacontenttype == o.datacontenttype &&
          dataschema == o.dataschema &&
          data == o.data &&
          siteslug == o.siteslug &&
          expirytime == o.expirytime &&
          intendeddeliverytime == o.intendeddeliverytime &&
          traceparent == o.traceparent &&
          priority == o.priority &&
          organisationslug == o.organisationslug &&
          billingorganisationslug == o.billingorganisationslug &&
          product == o.product &&
          dataref == o.dataref
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [specversion, id, source, subject, type, time, datacontenttype, dataschema, data, siteslug, expirytime, intendeddeliverytime, traceparent, priority, organisationslug, billingorganisationslug, product, dataref].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SlipstreamClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
