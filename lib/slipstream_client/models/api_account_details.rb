=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Bifrost@HenryScheinOne.com
Generated by: https://openapi-generator.tech
Generator version: 7.15.0

=end

require 'date'
require 'time'

module SlipstreamClient
  # The details of an API account
  class ApiAccountDetails
    # The unique identifier for the API account
    attr_accessor :identifier

    # The display name of the API account
    attr_accessor :display_name

    # The email address associated with the API account
    attr_accessor :email

    # The website associated with the API account
    attr_accessor :website

    # Contact phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164)
    attr_accessor :phone

    # A URL-safe unique identifier for an organisation which owns sites and/or pays their bills (See [Sqids](https://sqids.org))
    attr_accessor :organisation_slug

    attr_accessor :quota

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'identifier' => :'Identifier',
        :'display_name' => :'DisplayName',
        :'email' => :'Email',
        :'website' => :'Website',
        :'phone' => :'Phone',
        :'organisation_slug' => :'OrganisationSlug',
        :'quota' => :'Quota'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'identifier' => :'String',
        :'display_name' => :'String',
        :'email' => :'String',
        :'website' => :'String',
        :'phone' => :'String',
        :'organisation_slug' => :'String',
        :'quota' => :'ClientQuota'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SlipstreamClient::ApiAccountDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SlipstreamClient::ApiAccountDetails`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'organisation_slug')
        self.organisation_slug = attributes[:'organisation_slug']
      end

      if attributes.key?(:'quota')
        self.quota = attributes[:'quota']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@identifier.nil? && @identifier.to_s.length > 38
        invalid_properties.push('invalid value for "identifier", the character length must be smaller than or equal to 38.')
      end

      if !@display_name.nil? && @display_name.to_s.length > 120
        invalid_properties.push('invalid value for "display_name", the character length must be smaller than or equal to 120.')
      end

      if !@email.nil? && @email.to_s.length > 120
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 120.')
      end

      if !@website.nil? && @website.to_s.length > 300
        invalid_properties.push('invalid value for "website", the character length must be smaller than or equal to 300.')
      end

      if !@phone.nil? && @phone.to_s.length > 50
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 50.')
      end

      if !@organisation_slug.nil? && @organisation_slug.to_s.length > 20
        invalid_properties.push('invalid value for "organisation_slug", the character length must be smaller than or equal to 20.')
      end

      pattern = Regexp.new(/^[o][a-zA-Z0-9]{3,}$/)
      if !@organisation_slug.nil? && @organisation_slug !~ pattern
        invalid_properties.push("invalid value for \"organisation_slug\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@identifier.nil? && @identifier.to_s.length > 38
      return false if !@display_name.nil? && @display_name.to_s.length > 120
      return false if !@email.nil? && @email.to_s.length > 120
      return false if !@website.nil? && @website.to_s.length > 300
      return false if !@phone.nil? && @phone.to_s.length > 50
      return false if !@organisation_slug.nil? && @organisation_slug.to_s.length > 20
      return false if !@organisation_slug.nil? && @organisation_slug !~ Regexp.new(/^[o][a-zA-Z0-9]{3,}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] identifier Value to be assigned
    def identifier=(identifier)
      if identifier.nil?
        fail ArgumentError, 'identifier cannot be nil'
      end

      if identifier.to_s.length > 38
        fail ArgumentError, 'invalid value for "identifier", the character length must be smaller than or equal to 38.'
      end

      @identifier = identifier
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if display_name.nil?
        fail ArgumentError, 'display_name cannot be nil'
      end

      if display_name.to_s.length > 120
        fail ArgumentError, 'invalid value for "display_name", the character length must be smaller than or equal to 120.'
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.nil?
        fail ArgumentError, 'email cannot be nil'
      end

      if email.to_s.length > 120
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 120.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] website Value to be assigned
    def website=(website)
      if website.nil?
        fail ArgumentError, 'website cannot be nil'
      end

      if website.to_s.length > 300
        fail ArgumentError, 'invalid value for "website", the character length must be smaller than or equal to 300.'
      end

      @website = website
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if phone.nil?
        fail ArgumentError, 'phone cannot be nil'
      end

      if phone.to_s.length > 50
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 50.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] organisation_slug Value to be assigned
    def organisation_slug=(organisation_slug)
      if organisation_slug.nil?
        fail ArgumentError, 'organisation_slug cannot be nil'
      end

      if organisation_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "organisation_slug", the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[o][a-zA-Z0-9]{3,}$/)
      if organisation_slug !~ pattern
        fail ArgumentError, "invalid value for \"organisation_slug\", must conform to the pattern #{pattern}."
      end

      @organisation_slug = organisation_slug
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          identifier == o.identifier &&
          display_name == o.display_name &&
          email == o.email &&
          website == o.website &&
          phone == o.phone &&
          organisation_slug == o.organisation_slug &&
          quota == o.quota
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [identifier, display_name, email, website, phone, organisation_slug, quota].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SlipstreamClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
