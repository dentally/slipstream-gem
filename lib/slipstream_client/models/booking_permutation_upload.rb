=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Bifrost@HenryScheinOne.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module SlipstreamClient
  # Booking rule data for upload - allows flexible identifier formats
  class BookingPermutationUpload
    attr_accessor :booking_scenario

    # The Pms Specific identifier of the practitioner. 
    attr_accessor :practitioner_identifier

    # The Pms Specific identifier of the booking reason. 
    attr_accessor :reason_identifier

    # The payor for the appointment (e.g. 'Private', 'NHS', 'Insurance')
    attr_accessor :payor

    # Duration in ISO 8601 duration format (e.g. PT30M for 30 minutes)
    attr_accessor :duration

    # Duration in ISO 8601 duration format (e.g. PT30M for 30 minutes)
    attr_accessor :maximum_booking_lead_time

    # An amount of money in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#Minor_unit_fractions) minor units for the currency, e.g. 100 cents to charge $1.00 or 100 to charge ¥100 (a zero-decimal currency). The amount value supports up to eight digits, e.g. a value of 99999999 for a USD charge of $999,999.99.
    attr_accessor :price

    # An amount of money in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#Minor_unit_fractions) minor units for the currency, e.g. 100 cents to charge $1.00 or 100 to charge ¥100 (a zero-decimal currency). The amount value supports up to eight digits, e.g. a value of 99999999 for a USD charge of $999,999.99.
    attr_accessor :deposit

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'booking_scenario' => :'BookingScenario',
        :'practitioner_identifier' => :'PractitionerIdentifier',
        :'reason_identifier' => :'ReasonIdentifier',
        :'payor' => :'Payor',
        :'duration' => :'Duration',
        :'maximum_booking_lead_time' => :'MaximumBookingLeadTime',
        :'price' => :'Price',
        :'deposit' => :'Deposit'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'booking_scenario' => :'BookingScenario',
        :'practitioner_identifier' => :'String',
        :'reason_identifier' => :'String',
        :'payor' => :'String',
        :'duration' => :'String',
        :'maximum_booking_lead_time' => :'String',
        :'price' => :'Integer',
        :'deposit' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SlipstreamClient::BookingPermutationUpload` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SlipstreamClient::BookingPermutationUpload`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'booking_scenario')
        self.booking_scenario = attributes[:'booking_scenario']
      else
        self.booking_scenario = nil
      end

      if attributes.key?(:'practitioner_identifier')
        self.practitioner_identifier = attributes[:'practitioner_identifier']
      else
        self.practitioner_identifier = nil
      end

      if attributes.key?(:'reason_identifier')
        self.reason_identifier = attributes[:'reason_identifier']
      else
        self.reason_identifier = nil
      end

      if attributes.key?(:'payor')
        self.payor = attributes[:'payor']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      else
        self.duration = nil
      end

      if attributes.key?(:'maximum_booking_lead_time')
        self.maximum_booking_lead_time = attributes[:'maximum_booking_lead_time']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'deposit')
        self.deposit = attributes[:'deposit']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @booking_scenario.nil?
        invalid_properties.push('invalid value for "booking_scenario", booking_scenario cannot be nil.')
      end

      if @practitioner_identifier.nil?
        invalid_properties.push('invalid value for "practitioner_identifier", practitioner_identifier cannot be nil.')
      end

      if @practitioner_identifier.to_s.length > 38
        invalid_properties.push('invalid value for "practitioner_identifier", the character length must be smaller than or equal to 38.')
      end

      if @practitioner_identifier.to_s.length < 1
        invalid_properties.push('invalid value for "practitioner_identifier", the character length must be great than or equal to 1.')
      end

      if @reason_identifier.nil?
        invalid_properties.push('invalid value for "reason_identifier", reason_identifier cannot be nil.')
      end

      if @reason_identifier.to_s.length > 38
        invalid_properties.push('invalid value for "reason_identifier", the character length must be smaller than or equal to 38.')
      end

      if @reason_identifier.to_s.length < 1
        invalid_properties.push('invalid value for "reason_identifier", the character length must be great than or equal to 1.')
      end

      if !@payor.nil? && @payor.to_s.length > 40
        invalid_properties.push('invalid value for "payor", the character length must be smaller than or equal to 40.')
      end

      if !@payor.nil? && @payor.to_s.length < 1
        invalid_properties.push('invalid value for "payor", the character length must be great than or equal to 1.')
      end

      if @duration.nil?
        invalid_properties.push('invalid value for "duration", duration cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @booking_scenario.nil?
      return false if @practitioner_identifier.nil?
      return false if @practitioner_identifier.to_s.length > 38
      return false if @practitioner_identifier.to_s.length < 1
      return false if @reason_identifier.nil?
      return false if @reason_identifier.to_s.length > 38
      return false if @reason_identifier.to_s.length < 1
      return false if !@payor.nil? && @payor.to_s.length > 40
      return false if !@payor.nil? && @payor.to_s.length < 1
      return false if @duration.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] practitioner_identifier Value to be assigned
    def practitioner_identifier=(practitioner_identifier)
      if practitioner_identifier.nil?
        fail ArgumentError, 'practitioner_identifier cannot be nil'
      end

      if practitioner_identifier.to_s.length > 38
        fail ArgumentError, 'invalid value for "practitioner_identifier", the character length must be smaller than or equal to 38.'
      end

      if practitioner_identifier.to_s.length < 1
        fail ArgumentError, 'invalid value for "practitioner_identifier", the character length must be great than or equal to 1.'
      end

      @practitioner_identifier = practitioner_identifier
    end

    # Custom attribute writer method with validation
    # @param [Object] reason_identifier Value to be assigned
    def reason_identifier=(reason_identifier)
      if reason_identifier.nil?
        fail ArgumentError, 'reason_identifier cannot be nil'
      end

      if reason_identifier.to_s.length > 38
        fail ArgumentError, 'invalid value for "reason_identifier", the character length must be smaller than or equal to 38.'
      end

      if reason_identifier.to_s.length < 1
        fail ArgumentError, 'invalid value for "reason_identifier", the character length must be great than or equal to 1.'
      end

      @reason_identifier = reason_identifier
    end

    # Custom attribute writer method with validation
    # @param [Object] payor Value to be assigned
    def payor=(payor)
      if payor.nil?
        fail ArgumentError, 'payor cannot be nil'
      end

      if payor.to_s.length > 40
        fail ArgumentError, 'invalid value for "payor", the character length must be smaller than or equal to 40.'
      end

      if payor.to_s.length < 1
        fail ArgumentError, 'invalid value for "payor", the character length must be great than or equal to 1.'
      end

      @payor = payor
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          booking_scenario == o.booking_scenario &&
          practitioner_identifier == o.practitioner_identifier &&
          reason_identifier == o.reason_identifier &&
          payor == o.payor &&
          duration == o.duration &&
          maximum_booking_lead_time == o.maximum_booking_lead_time &&
          price == o.price &&
          deposit == o.deposit
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [booking_scenario, practitioner_identifier, reason_identifier, payor, duration, maximum_booking_lead_time, price, deposit].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SlipstreamClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
