=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Bifrost@HenryScheinOne.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module SlipstreamClient
  class AddressValidationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the results of a batch address validation request
    # Gets the completed batch result from the external provider.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param id [String] The batch Id of the address validation batch to retrieve
    # @param [Hash] opts the optional parameters
    # @return [BatchAddressValidationComplete]
    def address_fetch_batch(site_slug, id, opts = {})
      data, _status_code, _headers = address_fetch_batch_with_http_info(site_slug, id, opts)
      data
    end

    # Get the results of a batch address validation request
    # Gets the completed batch result from the external provider.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param id [String] The batch Id of the address validation batch to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchAddressValidationComplete, Integer, Hash)>] BatchAddressValidationComplete data, response status code and response headers
    def address_fetch_batch_with_http_info(site_slug, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressValidationApi.address_fetch_batch ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling AddressValidationApi.address_fetch_batch"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling AddressValidationApi.address_fetch_batch, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling AddressValidationApi.address_fetch_batch, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AddressValidationApi.address_fetch_batch"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/address/batch'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'Id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BatchAddressValidationComplete'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"AddressValidationApi.address_fetch_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressValidationApi#address_fetch_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate an address
    # Validates an address with an external provider.  The address validation is performed using a location bias towards the site's location. The result may or may not be corrected by the external provider.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param validate_address_request [ValidateAddressRequest] The address validation request
    # @param [Hash] opts the optional parameters
    # @return [ValidatedAddress]
    def address_validate(site_slug, validate_address_request, opts = {})
      data, _status_code, _headers = address_validate_with_http_info(site_slug, validate_address_request, opts)
      data
    end

    # Validate an address
    # Validates an address with an external provider.  The address validation is performed using a location bias towards the site&#39;s location. The result may or may not be corrected by the external provider.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param validate_address_request [ValidateAddressRequest] The address validation request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidatedAddress, Integer, Hash)>] ValidatedAddress data, response status code and response headers
    def address_validate_with_http_info(site_slug, validate_address_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressValidationApi.address_validate ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling AddressValidationApi.address_validate"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling AddressValidationApi.address_validate, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling AddressValidationApi.address_validate, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'validate_address_request' is set
      if @api_client.config.client_side_validation && validate_address_request.nil?
        fail ArgumentError, "Missing the required parameter 'validate_address_request' when calling AddressValidationApi.address_validate"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/address/validate'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(validate_address_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ValidatedAddress'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"AddressValidationApi.address_validate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressValidationApi#address_validate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate a batch of addresses
    # Validate one or more addresses in a single call. The batch process is asynchronous, requiring the caller to fetch the batch results in a subsequent fetch call with the batch ID.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param validate_address_request [Array<ValidateAddressRequest>] The batch of one or more addresses to validate
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def address_validate_batch(site_slug, validate_address_request, opts = {})
      address_validate_batch_with_http_info(site_slug, validate_address_request, opts)
      nil
    end

    # Validate a batch of addresses
    # Validate one or more addresses in a single call. The batch process is asynchronous, requiring the caller to fetch the batch results in a subsequent fetch call with the batch ID.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param validate_address_request [Array<ValidateAddressRequest>] The batch of one or more addresses to validate
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def address_validate_batch_with_http_info(site_slug, validate_address_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressValidationApi.address_validate_batch ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling AddressValidationApi.address_validate_batch"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling AddressValidationApi.address_validate_batch, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling AddressValidationApi.address_validate_batch, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'validate_address_request' is set
      if @api_client.config.client_side_validation && validate_address_request.nil?
        fail ArgumentError, "Missing the required parameter 'validate_address_request' when calling AddressValidationApi.address_validate_batch"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/address/batch'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(validate_address_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"AddressValidationApi.address_validate_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressValidationApi#address_validate_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
