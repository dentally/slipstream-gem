=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Nexus@HenryScheinOne.co.nz
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module SlipstreamClient
  class LinksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create short links
    # Creates shortened versions of one or more URLs
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param shorten_link_request [Array<ShortenLinkRequest>] The long links to shorten
    # @param [Hash] opts the optional parameters
    # @return [ShortLinksCreatedResponse]
    def create_short_links(site_slug, shorten_link_request, opts = {})
      data, _status_code, _headers = create_short_links_with_http_info(site_slug, shorten_link_request, opts)
      data
    end

    # Create short links
    # Creates shortened versions of one or more URLs
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param shorten_link_request [Array<ShortenLinkRequest>] The long links to shorten
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShortLinksCreatedResponse, Integer, Hash)>] ShortLinksCreatedResponse data, response status code and response headers
    def create_short_links_with_http_info(site_slug, shorten_link_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinksApi.create_short_links ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling LinksApi.create_short_links"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling LinksApi.create_short_links, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'shorten_link_request' is set
      if @api_client.config.client_side_validation && shorten_link_request.nil?
        fail ArgumentError, "Missing the required parameter 'shorten_link_request' when calling LinksApi.create_short_links"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/links'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(shorten_link_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ShortLinksCreatedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"LinksApi.create_short_links",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinksApi#create_short_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Shortened Link
    # Deletes a shortened link by ID
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param link_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a shortened link
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_short_link(site_slug, link_slug, opts = {})
      delete_short_link_with_http_info(site_slug, link_slug, opts)
      nil
    end

    # Delete Shortened Link
    # Deletes a shortened link by ID
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param link_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a shortened link
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_short_link_with_http_info(site_slug, link_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinksApi.delete_short_link ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling LinksApi.delete_short_link"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling LinksApi.delete_short_link, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'link_slug' is set
      if @api_client.config.client_side_validation && link_slug.nil?
        fail ArgumentError, "Missing the required parameter 'link_slug' when calling LinksApi.delete_short_link"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && link_slug !~ pattern
        fail ArgumentError, "invalid value for 'link_slug' when calling LinksApi.delete_short_link, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}/links/{LinkSlug}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'LinkSlug' + '}', CGI.escape(link_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"LinksApi.delete_short_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinksApi#delete_short_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Shortened Link
    # Gets the details of a shortened link by ID
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param link_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a shortened link
    # @param [Hash] opts the optional parameters
    # @return [ShortenedLink]
    def get_short_link(site_slug, link_slug, opts = {})
      data, _status_code, _headers = get_short_link_with_http_info(site_slug, link_slug, opts)
      data
    end

    # Get Shortened Link
    # Gets the details of a shortened link by ID
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param link_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a shortened link
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShortenedLink, Integer, Hash)>] ShortenedLink data, response status code and response headers
    def get_short_link_with_http_info(site_slug, link_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinksApi.get_short_link ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling LinksApi.get_short_link"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling LinksApi.get_short_link, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'link_slug' is set
      if @api_client.config.client_side_validation && link_slug.nil?
        fail ArgumentError, "Missing the required parameter 'link_slug' when calling LinksApi.get_short_link"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && link_slug !~ pattern
        fail ArgumentError, "invalid value for 'link_slug' when calling LinksApi.get_short_link, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}/links/{LinkSlug}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'LinkSlug' + '}', CGI.escape(link_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShortenedLink'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"LinksApi.get_short_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinksApi#get_short_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Shortened Links
    # Lists active short links for the site
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The page number to retrieve
    # @option opts [String] :next_page_token A token retrieved from a previous request, used to retrieve the next page of results
    # @option opts [Boolean] :is_visited If specified, filters the list to only links that are visited or unvisited. Omit to include all links
    # @option opts [Boolean] :has_click_tracking If specified, filters the list to only links that count clicks or don&#39;t count clicks. Omit to include all links
    # @return [ShortenedLinksListResponse]
    def list_short_links(site_slug, opts = {})
      data, _status_code, _headers = list_short_links_with_http_info(site_slug, opts)
      data
    end

    # List Shortened Links
    # Lists active short links for the site
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The page number to retrieve
    # @option opts [String] :next_page_token A token retrieved from a previous request, used to retrieve the next page of results
    # @option opts [Boolean] :is_visited If specified, filters the list to only links that are visited or unvisited. Omit to include all links
    # @option opts [Boolean] :has_click_tracking If specified, filters the list to only links that count clicks or don&#39;t count clicks. Omit to include all links
    # @return [Array<(ShortenedLinksListResponse, Integer, Hash)>] ShortenedLinksListResponse data, response status code and response headers
    def list_short_links_with_http_info(site_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LinksApi.list_short_links ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling LinksApi.list_short_links"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling LinksApi.list_short_links, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 250
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LinksApi.list_short_links, must be smaller than or equal to 250.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LinksApi.list_short_links, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}/links'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'nextPageToken'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?
      query_params[:'isVisited'] = opts[:'is_visited'] if !opts[:'is_visited'].nil?
      query_params[:'hasClickTracking'] = opts[:'has_click_tracking'] if !opts[:'has_click_tracking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShortenedLinksListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"LinksApi.list_short_links",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LinksApi#list_short_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
