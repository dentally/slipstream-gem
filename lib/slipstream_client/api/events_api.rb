=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Bifrost@HenryScheinOne.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module SlipstreamClient
  class EventsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Validate Webhook Subscription
    # Implements the [cloudevents validation](https://github.com/cloudevents/spec/blob/main/cloudevents/http-webhook.md#41-validation-request) specification so that standard cloudevent publishers can use it.
    # @param site_slug [String] The unique slug for the practice site
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :web_hook_request_rate The rate at which the client can send requests to the server
    # @option opts [String] :web_hook_request_origin The origin that is allowed to send requests to the server
    # @return [nil]
    def events_options(site_slug, opts = {})
      events_options_with_http_info(site_slug, opts)
      nil
    end

    # Validate Webhook Subscription
    # Implements the [cloudevents validation](https://github.com/cloudevents/spec/blob/main/cloudevents/http-webhook.md#41-validation-request) specification so that standard cloudevent publishers can use it.
    # @param site_slug [String] The unique slug for the practice site
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :web_hook_request_rate The rate at which the client can send requests to the server
    # @option opts [String] :web_hook_request_origin The origin that is allowed to send requests to the server
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def events_options_with_http_info(site_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.events_options ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling EventsApi.events_options"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling EventsApi.events_options, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling EventsApi.events_options, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}/events'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json']) unless header_params['Accept']
      header_params[:'WebHook-Request-Rate'] = opts[:'web_hook_request_rate'] if !opts[:'web_hook_request_rate'].nil?
      header_params[:'WebHook-Request-Origin'] = opts[:'web_hook_request_origin'] if !opts[:'web_hook_request_origin'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"EventsApi.events_options",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publish Events
    # Accepts CloudEvents or batches of CloudEvents related to the practice site. This can be used to send events to slipstream for processing, publishing as webhooks and analytics
    # @param site_slug [String] The unique slug for the practice site
    # @param cloud_event [CloudEvent] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def publish_events(site_slug, cloud_event, opts = {})
      publish_events_with_http_info(site_slug, cloud_event, opts)
      nil
    end

    # Publish Events
    # Accepts CloudEvents or batches of CloudEvents related to the practice site. This can be used to send events to slipstream for processing, publishing as webhooks and analytics
    # @param site_slug [String] The unique slug for the practice site
    # @param cloud_event [CloudEvent] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def publish_events_with_http_info(site_slug, cloud_event, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.publish_events ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling EventsApi.publish_events"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling EventsApi.publish_events, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling EventsApi.publish_events, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_event' is set
      if @api_client.config.client_side_validation && cloud_event.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_event' when calling EventsApi.publish_events"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/events'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/cloudevents+json', 'application/cloudevents-batch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cloud_event)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"EventsApi.publish_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#publish_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
