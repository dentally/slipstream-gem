=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Bifrost@HenryScheinOne.co.nz
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module SlipstreamClient
  class FormsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add forms to a form group, or reset them if they already exists (allowing it to be refilled)
    # Add/Reset one or more forms to an existing form group
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param create_forms_request [CreateFormsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_form_to_group(site_slug, user_slug, group_slug, create_forms_request, opts = {})
      add_form_to_group_with_http_info(site_slug, user_slug, group_slug, create_forms_request, opts)
      nil
    end

    # Add forms to a form group, or reset them if they already exists (allowing it to be refilled)
    # Add/Reset one or more forms to an existing form group
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param create_forms_request [CreateFormsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_form_to_group_with_http_info(site_slug, user_slug, group_slug, create_forms_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.add_form_to_group ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.add_form_to_group"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.add_form_to_group, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.add_form_to_group"
      end
      # verify the required parameter 'group_slug' is set
      if @api_client.config.client_side_validation && group_slug.nil?
        fail ArgumentError, "Missing the required parameter 'group_slug' when calling FormsApi.add_form_to_group"
      end
      # verify the required parameter 'create_forms_request' is set
      if @api_client.config.client_side_validation && create_forms_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_forms_request' when calling FormsApi.add_form_to_group"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}/groups/{GroupSlug}/forms'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s)).sub('{' + 'GroupSlug' + '}', CGI.escape(group_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_forms_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.add_form_to_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#add_form_to_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a form group for a user
    # Creates a form group with zero or more forms for a user to fill out
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param create_form_group_request [CreateFormGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [FormGroupDetailsResponse]
    def create_form_group(site_slug, user_slug, create_form_group_request, opts = {})
      data, _status_code, _headers = create_form_group_with_http_info(site_slug, user_slug, create_form_group_request, opts)
      data
    end

    # Create a form group for a user
    # Creates a form group with zero or more forms for a user to fill out
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param create_form_group_request [CreateFormGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FormGroupDetailsResponse, Integer, Hash)>] FormGroupDetailsResponse data, response status code and response headers
    def create_form_group_with_http_info(site_slug, user_slug, create_form_group_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.create_form_group ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.create_form_group"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.create_form_group, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.create_form_group"
      end
      # verify the required parameter 'create_form_group_request' is set
      if @api_client.config.client_side_validation && create_form_group_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_form_group_request' when calling FormsApi.create_form_group"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}/groups'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_form_group_request)

      # return_type
      return_type = opts[:debug_return_type] || 'FormGroupDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.create_form_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#create_form_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a user with forms
    # Creates a user and a set of forms for them to fill out
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param create_user_with_forms_request [CreateUserWithFormsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UserWithFormsResponse]
    def create_user_and_forms(site_slug, create_user_with_forms_request, opts = {})
      data, _status_code, _headers = create_user_and_forms_with_http_info(site_slug, create_user_with_forms_request, opts)
      data
    end

    # Create a user with forms
    # Creates a user and a set of forms for them to fill out
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param create_user_with_forms_request [CreateUserWithFormsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserWithFormsResponse, Integer, Hash)>] UserWithFormsResponse data, response status code and response headers
    def create_user_and_forms_with_http_info(site_slug, create_user_with_forms_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.create_user_and_forms ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.create_user_and_forms"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.create_user_and_forms, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'create_user_with_forms_request' is set
      if @api_client.config.client_side_validation && create_user_with_forms_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_user_with_forms_request' when calling FormsApi.create_user_and_forms"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_user_with_forms_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UserWithFormsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.create_user_and_forms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#create_user_and_forms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a form
    # Delete a form from the group
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param form_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_form(site_slug, user_slug, group_slug, form_slug, opts = {})
      delete_form_with_http_info(site_slug, user_slug, group_slug, form_slug, opts)
      nil
    end

    # Delete a form
    # Delete a form from the group
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param form_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_form_with_http_info(site_slug, user_slug, group_slug, form_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.delete_form ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.delete_form"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.delete_form, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.delete_form"
      end
      # verify the required parameter 'group_slug' is set
      if @api_client.config.client_side_validation && group_slug.nil?
        fail ArgumentError, "Missing the required parameter 'group_slug' when calling FormsApi.delete_form"
      end
      # verify the required parameter 'form_slug' is set
      if @api_client.config.client_side_validation && form_slug.nil?
        fail ArgumentError, "Missing the required parameter 'form_slug' when calling FormsApi.delete_form"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}/groups/{GroupSlug}/forms/{FormSlug}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s)).sub('{' + 'GroupSlug' + '}', CGI.escape(group_slug.to_s)).sub('{' + 'FormSlug' + '}', CGI.escape(form_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.delete_form",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#delete_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a form group
    # Delete a form group and the associated forms
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_form_group(site_slug, user_slug, group_slug, opts = {})
      delete_form_group_with_http_info(site_slug, user_slug, group_slug, opts)
      nil
    end

    # Delete a form group
    # Delete a form group and the associated forms
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_form_group_with_http_info(site_slug, user_slug, group_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.delete_form_group ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.delete_form_group"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.delete_form_group, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.delete_form_group"
      end
      # verify the required parameter 'group_slug' is set
      if @api_client.config.client_side_validation && group_slug.nil?
        fail ArgumentError, "Missing the required parameter 'group_slug' when calling FormsApi.delete_form_group"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}/groups/{GroupSlug}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s)).sub('{' + 'GroupSlug' + '}', CGI.escape(group_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.delete_form_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#delete_form_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a form user record
    # Delete a form user record and all its associated form data
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_and_forms(site_slug, user_slug, opts = {})
      delete_user_and_forms_with_http_info(site_slug, user_slug, opts)
      nil
    end

    # Delete a form user record
    # Delete a form user record and all its associated form data
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_and_forms_with_http_info(site_slug, user_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.delete_user_and_forms ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.delete_user_and_forms"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.delete_user_and_forms, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.delete_user_and_forms"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.delete_user_and_forms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#delete_user_and_forms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a form group
    # Get a form group and the associated forms
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param [Hash] opts the optional parameters
    # @return [FormGroupDetailsResponse]
    def get_form_group(site_slug, user_slug, group_slug, opts = {})
      data, _status_code, _headers = get_form_group_with_http_info(site_slug, user_slug, group_slug, opts)
      data
    end

    # Get a form group
    # Get a form group and the associated forms
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param [Hash] opts the optional parameters
    # @return [Array<(FormGroupDetailsResponse, Integer, Hash)>] FormGroupDetailsResponse data, response status code and response headers
    def get_form_group_with_http_info(site_slug, user_slug, group_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.get_form_group ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.get_form_group"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.get_form_group, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.get_form_group"
      end
      # verify the required parameter 'group_slug' is set
      if @api_client.config.client_side_validation && group_slug.nil?
        fail ArgumentError, "Missing the required parameter 'group_slug' when calling FormsApi.get_form_group"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}/groups/{GroupSlug}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s)).sub('{' + 'GroupSlug' + '}', CGI.escape(group_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FormGroupDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.get_form_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#get_form_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get patient details
    # Gets the details of a patient
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_form_groups If true, the response will include the form groups of the user
    # @return [FormUserDetailsResponse]
    def get_form_user(site_slug, user_slug, opts = {})
      data, _status_code, _headers = get_form_user_with_http_info(site_slug, user_slug, opts)
      data
    end

    # Get patient details
    # Gets the details of a patient
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_form_groups If true, the response will include the form groups of the user
    # @return [Array<(FormUserDetailsResponse, Integer, Hash)>] FormUserDetailsResponse data, response status code and response headers
    def get_form_user_with_http_info(site_slug, user_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.get_form_user ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.get_form_user"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.get_form_user, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.get_form_user"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeFormGroups'] = opts[:'include_form_groups'] if !opts[:'include_form_groups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FormUserDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.get_form_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#get_form_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get form details
    # Gets the form details with the user's responses
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param form_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form
    # @param [Hash] opts the optional parameters
    # @return [FormDetailsResponse]
    def get_group_form_details(site_slug, user_slug, group_slug, form_slug, opts = {})
      data, _status_code, _headers = get_group_form_details_with_http_info(site_slug, user_slug, group_slug, form_slug, opts)
      data
    end

    # Get form details
    # Gets the form details with the user&#39;s responses
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param form_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form
    # @param [Hash] opts the optional parameters
    # @return [Array<(FormDetailsResponse, Integer, Hash)>] FormDetailsResponse data, response status code and response headers
    def get_group_form_details_with_http_info(site_slug, user_slug, group_slug, form_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.get_group_form_details ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.get_group_form_details"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.get_group_form_details, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.get_group_form_details"
      end
      # verify the required parameter 'group_slug' is set
      if @api_client.config.client_side_validation && group_slug.nil?
        fail ArgumentError, "Missing the required parameter 'group_slug' when calling FormsApi.get_group_form_details"
      end
      # verify the required parameter 'form_slug' is set
      if @api_client.config.client_side_validation && form_slug.nil?
        fail ArgumentError, "Missing the required parameter 'form_slug' when calling FormsApi.get_group_form_details"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}/groups/{GroupSlug}/forms/{FormSlug}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s)).sub('{' + 'GroupSlug' + '}', CGI.escape(group_slug.to_s)).sub('{' + 'FormSlug' + '}', CGI.escape(form_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FormDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.get_group_form_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#get_group_form_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get form details
    # Gets the form with the user's responses
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param form_type_or_id [String] The type of form to retrieve, or the form&#39;s unique identifier (TypeId) assigned by the client/PMS
    # @param [Hash] opts the optional parameters
    # @return [FormDetailsResponse]
    def get_user_form_details(site_slug, user_slug, form_type_or_id, opts = {})
      data, _status_code, _headers = get_user_form_details_with_http_info(site_slug, user_slug, form_type_or_id, opts)
      data
    end

    # Get form details
    # Gets the form with the user&#39;s responses
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param form_type_or_id [String] The type of form to retrieve, or the form&#39;s unique identifier (TypeId) assigned by the client/PMS
    # @param [Hash] opts the optional parameters
    # @return [Array<(FormDetailsResponse, Integer, Hash)>] FormDetailsResponse data, response status code and response headers
    def get_user_form_details_with_http_info(site_slug, user_slug, form_type_or_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.get_user_form_details ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.get_user_form_details"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.get_user_form_details, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.get_user_form_details"
      end
      # verify the required parameter 'form_type_or_id' is set
      if @api_client.config.client_side_validation && form_type_or_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_type_or_id' when calling FormsApi.get_user_form_details"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}/forms/{FormTypeOrId}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s)).sub('{' + 'FormTypeOrId' + '}', CGI.escape(form_type_or_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FormDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.get_user_form_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#get_user_form_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List form groups for a user
    # Lists all form groups for a user
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of items to retrieve in this request
    # @option opts [String] :next_page_token A token retrieved from a previous request, used to retrieve the next page of results
    # @return [FormGroupDetailsListResponse]
    def list_form_groups_for_user(site_slug, user_slug, opts = {})
      data, _status_code, _headers = list_form_groups_for_user_with_http_info(site_slug, user_slug, opts)
      data
    end

    # List form groups for a user
    # Lists all form groups for a user
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of items to retrieve in this request
    # @option opts [String] :next_page_token A token retrieved from a previous request, used to retrieve the next page of results
    # @return [Array<(FormGroupDetailsListResponse, Integer, Hash)>] FormGroupDetailsListResponse data, response status code and response headers
    def list_form_groups_for_user_with_http_info(site_slug, user_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.list_form_groups_for_user ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.list_form_groups_for_user"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.list_form_groups_for_user, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.list_form_groups_for_user"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 250
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FormsApi.list_form_groups_for_user, must be smaller than or equal to 250.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FormsApi.list_form_groups_for_user, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}/groups'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'nextPageToken'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FormGroupDetailsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.list_form_groups_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#list_form_groups_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Form Users
    # List all form users for a site
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of items to retrieve in this request
    # @option opts [String] :next_page_token A token retrieved from a previous request, used to retrieve the next page of results
    # @option opts [Boolean] :include_form_groups If true, the response will include the form groups of the user
    # @return [FormUserDetailsListResponse]
    def list_form_users(site_slug, opts = {})
      data, _status_code, _headers = list_form_users_with_http_info(site_slug, opts)
      data
    end

    # List Form Users
    # List all form users for a site
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of items to retrieve in this request
    # @option opts [String] :next_page_token A token retrieved from a previous request, used to retrieve the next page of results
    # @option opts [Boolean] :include_form_groups If true, the response will include the form groups of the user
    # @return [Array<(FormUserDetailsListResponse, Integer, Hash)>] FormUserDetailsListResponse data, response status code and response headers
    def list_form_users_with_http_info(site_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.list_form_users ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.list_form_users"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.list_form_users, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 250
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FormsApi.list_form_users, must be smaller than or equal to 250.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FormsApi.list_form_users, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'nextPageToken'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?
      query_params[:'includeFormGroups'] = opts[:'include_form_groups'] if !opts[:'include_form_groups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FormUserDetailsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.list_form_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#list_form_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List forms for a form group
    # Lists all forms for a form group
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_user_responses If true, the response will include the responses of the user
    # @return [FormDetailsListResponse]
    def list_forms_in_group(site_slug, user_slug, group_slug, opts = {})
      data, _status_code, _headers = list_forms_in_group_with_http_info(site_slug, user_slug, group_slug, opts)
      data
    end

    # List forms for a form group
    # Lists all forms for a form group
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param group_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a form group
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_user_responses If true, the response will include the responses of the user
    # @return [Array<(FormDetailsListResponse, Integer, Hash)>] FormDetailsListResponse data, response status code and response headers
    def list_forms_in_group_with_http_info(site_slug, user_slug, group_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.list_forms_in_group ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.list_forms_in_group"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.list_forms_in_group, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.list_forms_in_group"
      end
      # verify the required parameter 'group_slug' is set
      if @api_client.config.client_side_validation && group_slug.nil?
        fail ArgumentError, "Missing the required parameter 'group_slug' when calling FormsApi.list_forms_in_group"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}/groups/{GroupSlug}/forms'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s)).sub('{' + 'GroupSlug' + '}', CGI.escape(group_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeUserResponses'] = opts[:'include_user_responses'] if !opts[:'include_user_responses'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FormDetailsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.list_forms_in_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#list_forms_in_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a form user
    # Update a form user's patient details
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param update_form_user_request [UpdateFormUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_form_user(site_slug, user_slug, update_form_user_request, opts = {})
      update_form_user_with_http_info(site_slug, user_slug, update_form_user_request, opts)
      nil
    end

    # Update a form user
    # Update a form user&#39;s patient details
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param user_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a user
    # @param update_form_user_request [UpdateFormUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_form_user_with_http_info(site_slug, user_slug, update_form_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.update_form_user ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling FormsApi.update_form_user"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling FormsApi.update_form_user, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_slug' is set
      if @api_client.config.client_side_validation && user_slug.nil?
        fail ArgumentError, "Missing the required parameter 'user_slug' when calling FormsApi.update_form_user"
      end
      # verify the required parameter 'update_form_user_request' is set
      if @api_client.config.client_side_validation && update_form_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_form_user_request' when calling FormsApi.update_form_user"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/forms/users/{UserSlug}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'UserSlug' + '}', CGI.escape(user_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_form_user_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"FormsApi.update_form_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#update_form_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
