=begin
#Slipstream Filtered API (Physical Post, SMS, Billing)

#Filtered Slipstream API containing only Physical Post, SMS, Billing, and webhook endpoints

The version of the OpenAPI document: 1.0.0-filtered
Contact: Bifrost@HenryScheinOne.com
Generated by: https://openapi-generator.tech
Generator version: 7.15.0

=end

require 'cgi'

module SlipstreamClient
  class SMSApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get sms details
    # Gets the details of an sms sent on behalf of the practice
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param sms_id [String] The Id that uniquely identifies the sms in Slipstream
    # @param [Hash] opts the optional parameters
    # @return [SmsDetails]
    def get_sms_details(site_slug, sms_id, opts = {})
      data, _status_code, _headers = get_sms_details_with_http_info(site_slug, sms_id, opts)
      data
    end

    # Get sms details
    # Gets the details of an sms sent on behalf of the practice
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param sms_id [String] The Id that uniquely identifies the sms in Slipstream
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmsDetails, Integer, Hash)>] SmsDetails data, response status code and response headers
    def get_sms_details_with_http_info(site_slug, sms_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMSApi.get_sms_details ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling SMSApi.get_sms_details"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling SMSApi.get_sms_details, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling SMSApi.get_sms_details, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'sms_id' is set
      if @api_client.config.client_side_validation && sms_id.nil?
        fail ArgumentError, "Missing the required parameter 'sms_id' when calling SMSApi.get_sms_details"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/sms/{SmsId}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'SmsId' + '}', CGI.escape(sms_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SmsDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"SMSApi.get_sms_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMSApi#get_sms_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send SMS
    # Queues an SMS for sending on behalf of the practice
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param send_sms_request [Array<SendSmsRequest>] The details of the SMS to send
    # @param [Hash] opts the optional parameters
    # @return [SendSmsResponse]
    def send_sms(site_slug, send_sms_request, opts = {})
      data, _status_code, _headers = send_sms_with_http_info(site_slug, send_sms_request, opts)
      data
    end

    # Send SMS
    # Queues an SMS for sending on behalf of the practice
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param send_sms_request [Array<SendSmsRequest>] The details of the SMS to send
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendSmsResponse, Integer, Hash)>] SendSmsResponse data, response status code and response headers
    def send_sms_with_http_info(site_slug, send_sms_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SMSApi.send_sms ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling SMSApi.send_sms"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling SMSApi.send_sms, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling SMSApi.send_sms, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'send_sms_request' is set
      if @api_client.config.client_side_validation && send_sms_request.nil?
        fail ArgumentError, "Missing the required parameter 'send_sms_request' when calling SMSApi.send_sms"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/sms'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(send_sms_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SendSmsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"SMSApi.send_sms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMSApi#send_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
