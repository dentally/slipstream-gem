=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Nexus@HenryScheinOne.co.nz
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module SlipstreamClient
  class SiteDetailsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add capability
    # Adds a single capability to the list of functionality that the practice site supports. See [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param capability [Capability] The capability to add to the practice, see [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_practice_site_capability(site_slug, capability, opts = {})
      add_practice_site_capability_with_http_info(site_slug, capability, opts)
      nil
    end

    # Add capability
    # Adds a single capability to the list of functionality that the practice site supports. See [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param capability [Capability] The capability to add to the practice, see [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_practice_site_capability_with_http_info(site_slug, capability, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteDetailsApi.add_practice_site_capability ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling SiteDetailsApi.add_practice_site_capability"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling SiteDetailsApi.add_practice_site_capability, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'capability' is set
      if @api_client.config.client_side_validation && capability.nil?
        fail ArgumentError, "Missing the required parameter 'capability' when calling SiteDetailsApi.add_practice_site_capability"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/capabilities/{capability}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'capability' + '}', CGI.escape(capability.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth']

      new_options = opts.merge(
        :operation => :"SiteDetailsApi.add_practice_site_capability",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteDetailsApi#add_practice_site_capability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get practice site details
    # Fetches the full details of a practice site in the slipstream practice registry
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [PracticeSiteDetails]
    def get_practice_site_details(site_slug, opts = {})
      data, _status_code, _headers = get_practice_site_details_with_http_info(site_slug, opts)
      data
    end

    # Get practice site details
    # Fetches the full details of a practice site in the slipstream practice registry
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [Array<(PracticeSiteDetails, Integer, Hash)>] PracticeSiteDetails data, response status code and response headers
    def get_practice_site_details_with_http_info(site_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteDetailsApi.get_practice_site_details ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling SiteDetailsApi.get_practice_site_details"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling SiteDetailsApi.get_practice_site_details, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PracticeSiteDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth']

      new_options = opts.merge(
        :operation => :"SiteDetailsApi.get_practice_site_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteDetailsApi#get_practice_site_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List capabilities
    # Fetches the list of functionality that a practice site (and the software it is using) supports. See [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [Array<Capability>]
    def list_practice_site_capabilities(site_slug, opts = {})
      data, _status_code, _headers = list_practice_site_capabilities_with_http_info(site_slug, opts)
      data
    end

    # List capabilities
    # Fetches the list of functionality that a practice site (and the software it is using) supports. See [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Capability>, Integer, Hash)>] Array<Capability> data, response status code and response headers
    def list_practice_site_capabilities_with_http_info(site_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteDetailsApi.list_practice_site_capabilities ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling SiteDetailsApi.list_practice_site_capabilities"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling SiteDetailsApi.list_practice_site_capabilities, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}/capabilities'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Capability>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth']

      new_options = opts.merge(
        :operation => :"SiteDetailsApi.list_practice_site_capabilities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteDetailsApi#list_practice_site_capabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check capability
    # Checks if the practice supports a capability. See [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param capability [Capability] The capability to add to the practice, see [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param [Hash] opts the optional parameters
    # @return [Boolean]
    def practice_site_has_capability(site_slug, capability, opts = {})
      data, _status_code, _headers = practice_site_has_capability_with_http_info(site_slug, capability, opts)
      data
    end

    # Check capability
    # Checks if the practice supports a capability. See [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param capability [Capability] The capability to add to the practice, see [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def practice_site_has_capability_with_http_info(site_slug, capability, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteDetailsApi.practice_site_has_capability ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling SiteDetailsApi.practice_site_has_capability"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling SiteDetailsApi.practice_site_has_capability, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'capability' is set
      if @api_client.config.client_side_validation && capability.nil?
        fail ArgumentError, "Missing the required parameter 'capability' when calling SiteDetailsApi.practice_site_has_capability"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/capabilities/{capability}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'capability' + '}', CGI.escape(capability.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Boolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth']

      new_options = opts.merge(
        :operation => :"SiteDetailsApi.practice_site_has_capability",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteDetailsApi#practice_site_has_capability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove capability
    # Removes a capability from a practice. See [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param capability [Capability] The capability to add to the practice, see [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_practice_site_capability(site_slug, capability, opts = {})
      remove_practice_site_capability_with_http_info(site_slug, capability, opts)
      nil
    end

    # Remove capability
    # Removes a capability from a practice. See [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param capability [Capability] The capability to add to the practice, see [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_practice_site_capability_with_http_info(site_slug, capability, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteDetailsApi.remove_practice_site_capability ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling SiteDetailsApi.remove_practice_site_capability"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling SiteDetailsApi.remove_practice_site_capability, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'capability' is set
      if @api_client.config.client_side_validation && capability.nil?
        fail ArgumentError, "Missing the required parameter 'capability' when calling SiteDetailsApi.remove_practice_site_capability"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/capabilities/{capability}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s)).sub('{' + 'capability' + '}', CGI.escape(capability.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth']

      new_options = opts.merge(
        :operation => :"SiteDetailsApi.remove_practice_site_capability",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteDetailsApi#remove_practice_site_capability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update practice site details
    # Updates the details of a practice site in the Slipstream practice registry
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param update_practice_site_details_request [UpdatePracticeSiteDetailsRequest] The details of the practice site to onboard
    # @param [Hash] opts the optional parameters
    # @return [PracticeSiteIdentity]
    def update_practice_site(site_slug, update_practice_site_details_request, opts = {})
      data, _status_code, _headers = update_practice_site_with_http_info(site_slug, update_practice_site_details_request, opts)
      data
    end

    # Update practice site details
    # Updates the details of a practice site in the Slipstream practice registry
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param update_practice_site_details_request [UpdatePracticeSiteDetailsRequest] The details of the practice site to onboard
    # @param [Hash] opts the optional parameters
    # @return [Array<(PracticeSiteIdentity, Integer, Hash)>] PracticeSiteIdentity data, response status code and response headers
    def update_practice_site_with_http_info(site_slug, update_practice_site_details_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteDetailsApi.update_practice_site ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling SiteDetailsApi.update_practice_site"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling SiteDetailsApi.update_practice_site, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'update_practice_site_details_request' is set
      if @api_client.config.client_side_validation && update_practice_site_details_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_practice_site_details_request' when calling SiteDetailsApi.update_practice_site"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_practice_site_details_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PracticeSiteIdentity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth']

      new_options = opts.merge(
        :operation => :"SiteDetailsApi.update_practice_site",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteDetailsApi#update_practice_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace capabilities
    # Replaces the list of functionality that a practice site (and the software it is using) supports. See [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param capability [Array<Capability>] The capabilities supported by the practice site
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_practice_site_capabilities(site_slug, capability, opts = {})
      update_practice_site_capabilities_with_http_info(site_slug, capability, opts)
      nil
    end

    # Replace capabilities
    # Replaces the list of functionality that a practice site (and the software it is using) supports. See [Capabilities](#section/Getting-started/Capabilities) for more details.
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param capability [Array<Capability>] The capabilities supported by the practice site
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_practice_site_capabilities_with_http_info(site_slug, capability, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteDetailsApi.update_practice_site_capabilities ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling SiteDetailsApi.update_practice_site_capabilities"
      end
      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling SiteDetailsApi.update_practice_site_capabilities, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'capability' is set
      if @api_client.config.client_side_validation && capability.nil?
        fail ArgumentError, "Missing the required parameter 'capability' when calling SiteDetailsApi.update_practice_site_capabilities"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/capabilities'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(capability)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth']

      new_options = opts.merge(
        :operation => :"SiteDetailsApi.update_practice_site_capabilities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteDetailsApi#update_practice_site_capabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
