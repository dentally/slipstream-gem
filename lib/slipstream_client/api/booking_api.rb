=begin
#Practice -> Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Contact: Bifrost@HenryScheinOne.com
Generated by: https://openapi-generator.tech
Generator version: 7.15.0

=end

require 'cgi'

module SlipstreamClient
  class BookingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete online booking information for the site
    #  **Warning**: This operation will delete all online booking details for the site (booking rules, availability data etc).  Online booking should be made inactive before this operation is performed. 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_online_booking_site(site_slug, opts = {})
      delete_online_booking_site_with_http_info(site_slug, opts)
      nil
    end

    # Delete online booking information for the site
    #  **Warning**: This operation will delete all online booking details for the site (booking rules, availability data etc).  Online booking should be made inactive before this operation is performed. 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_online_booking_site_with_http_info(site_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingApi.delete_online_booking_site ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling BookingApi.delete_online_booking_site"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling BookingApi.delete_online_booking_site, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling BookingApi.delete_online_booking_site, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}/booking'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"BookingApi.delete_online_booking_site",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#delete_online_booking_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get online booking site details
    # Retrieves online booking details for particular site 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [OnlineBookingSiteDetails]
    def get_online_booking_site_details(site_slug, opts = {})
      data, _status_code, _headers = get_online_booking_site_details_with_http_info(site_slug, opts)
      data
    end

    # Get online booking site details
    # Retrieves online booking details for particular site 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [Array<(OnlineBookingSiteDetails, Integer, Hash)>] OnlineBookingSiteDetails data, response status code and response headers
    def get_online_booking_site_details_with_http_info(site_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingApi.get_online_booking_site_details ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling BookingApi.get_online_booking_site_details"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling BookingApi.get_online_booking_site_details, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling BookingApi.get_online_booking_site_details, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}/booking'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OnlineBookingSiteDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"BookingApi.get_online_booking_site_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#get_online_booking_site_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get online booking site details
    # Retrieve online booking payments fee details for a particular site 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [OnlineBookingSitePaymentsFee]
    def get_online_booking_site_payments_fee(site_slug, opts = {})
      data, _status_code, _headers = get_online_booking_site_payments_fee_with_http_info(site_slug, opts)
      data
    end

    # Get online booking site details
    # Retrieve online booking payments fee details for a particular site 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [Array<(OnlineBookingSitePaymentsFee, Integer, Hash)>] OnlineBookingSitePaymentsFee data, response status code and response headers
    def get_online_booking_site_payments_fee_with_http_info(site_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingApi.get_online_booking_site_payments_fee ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling BookingApi.get_online_booking_site_payments_fee"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling BookingApi.get_online_booking_site_payments_fee, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling BookingApi.get_online_booking_site_payments_fee, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}/booking/payments_fee'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OnlineBookingSitePaymentsFee'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"BookingApi.get_online_booking_site_payments_fee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#get_online_booking_site_payments_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Online Booking site details
    # Lists Online Booking site in the slipstream Online Booking service
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The page number to retrieve
    # @option opts [String] :next_page_token A token retrieved from a previous request, used to retrieve the next page of results
    # @option opts [String] :client_identifier The client identifier to search
    # @option opts [String] :client_unique_id The client unique id to search
    # @option opts [String] :client_subscription_id The subscription id to search
    # @option opts [String] :name The client identifier to search
    # @option opts [Boolean] :is_active Filter active or inactive sites.
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [ListOnlineBookingSitesResponse]
    def list_online_booking_sites(opts = {})
      data, _status_code, _headers = list_online_booking_sites_with_http_info(opts)
      data
    end

    # List Online Booking site details
    # Lists Online Booking site in the slipstream Online Booking service
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The page number to retrieve
    # @option opts [String] :next_page_token A token retrieved from a previous request, used to retrieve the next page of results
    # @option opts [String] :client_identifier The client identifier to search
    # @option opts [String] :client_unique_id The client unique id to search
    # @option opts [String] :client_subscription_id The subscription id to search
    # @option opts [String] :name The client identifier to search
    # @option opts [Boolean] :is_active Filter active or inactive sites.
    # @option opts [PracticeManagementSoftware] :x_practice_management_software The intended practice management software for the request, used to disambiguate a pms specific identifier when you have access to multiple PMS systems.   **Omit this if you only have access to a single PMS.** 
    # @return [Array<(ListOnlineBookingSitesResponse, Integer, Hash)>] ListOnlineBookingSitesResponse data, response status code and response headers
    def list_online_booking_sites_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingApi.list_online_booking_sites ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 250
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling BookingApi.list_online_booking_sites, must be smaller than or equal to 250.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling BookingApi.list_online_booking_sites, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/booking'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'nextPageToken'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?
      query_params[:'clientIdentifier'] = opts[:'client_identifier'] if !opts[:'client_identifier'].nil?
      query_params[:'clientUniqueId'] = opts[:'client_unique_id'] if !opts[:'client_unique_id'].nil?
      query_params[:'clientSubscriptionId'] = opts[:'client_subscription_id'] if !opts[:'client_subscription_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'isActive'] = opts[:'is_active'] if !opts[:'is_active'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      header_params[:'X-Practice-Management-Software'] = opts[:'x_practice_management_software'] if !opts[:'x_practice_management_software'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListOnlineBookingSitesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"BookingApi.list_online_booking_sites",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#list_online_booking_sites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Re-populate online booking details for a site (Jarvis)
    # Re-populate online booking details in Jarvis. 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def online_booking_site_populate_scheduler(site_slug, opts = {})
      online_booking_site_populate_scheduler_with_http_info(site_slug, opts)
      nil
    end

    # Re-populate online booking details for a site (Jarvis)
    # Re-populate online booking details in Jarvis. 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def online_booking_site_populate_scheduler_with_http_info(site_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingApi.online_booking_site_populate_scheduler ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling BookingApi.online_booking_site_populate_scheduler"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling BookingApi.online_booking_site_populate_scheduler, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling BookingApi.online_booking_site_populate_scheduler, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/sites/{SiteSlug}/booking/populate_scheduler'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"BookingApi.online_booking_site_populate_scheduler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#online_booking_site_populate_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update existing online booking site details
    # Update online booking details for a site.  
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param update_online_booking_site_details_request [UpdateOnlineBookingSiteDetailsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OnlineBookingSiteDetails]
    def patch_online_booking_site_details(site_slug, update_online_booking_site_details_request, opts = {})
      data, _status_code, _headers = patch_online_booking_site_details_with_http_info(site_slug, update_online_booking_site_details_request, opts)
      data
    end

    # Update existing online booking site details
    # Update online booking details for a site.  
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param update_online_booking_site_details_request [UpdateOnlineBookingSiteDetailsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OnlineBookingSiteDetails, Integer, Hash)>] OnlineBookingSiteDetails data, response status code and response headers
    def patch_online_booking_site_details_with_http_info(site_slug, update_online_booking_site_details_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingApi.patch_online_booking_site_details ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling BookingApi.patch_online_booking_site_details"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling BookingApi.patch_online_booking_site_details, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling BookingApi.patch_online_booking_site_details, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'update_online_booking_site_details_request' is set
      if @api_client.config.client_side_validation && update_online_booking_site_details_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_online_booking_site_details_request' when calling BookingApi.patch_online_booking_site_details"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/booking'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_online_booking_site_details_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OnlineBookingSiteDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"BookingApi.patch_online_booking_site_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#patch_online_booking_site_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update online booking payments fee for a site
    # Update online booking payments fee for a site.  
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param online_booking_site_payments_fee [OnlineBookingSitePaymentsFee] 
    # @param [Hash] opts the optional parameters
    # @return [OnlineBookingSitePaymentsFee]
    def update_online_booking_site_payments_fee(site_slug, online_booking_site_payments_fee, opts = {})
      data, _status_code, _headers = update_online_booking_site_payments_fee_with_http_info(site_slug, online_booking_site_payments_fee, opts)
      data
    end

    # Update online booking payments fee for a site
    # Update online booking payments fee for a site.  
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param online_booking_site_payments_fee [OnlineBookingSitePaymentsFee] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OnlineBookingSitePaymentsFee, Integer, Hash)>] OnlineBookingSitePaymentsFee data, response status code and response headers
    def update_online_booking_site_payments_fee_with_http_info(site_slug, online_booking_site_payments_fee, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingApi.update_online_booking_site_payments_fee ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling BookingApi.update_online_booking_site_payments_fee"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling BookingApi.update_online_booking_site_payments_fee, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling BookingApi.update_online_booking_site_payments_fee, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'online_booking_site_payments_fee' is set
      if @api_client.config.client_side_validation && online_booking_site_payments_fee.nil?
        fail ArgumentError, "Missing the required parameter 'online_booking_site_payments_fee' when calling BookingApi.update_online_booking_site_payments_fee"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/booking/payments_fee'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(online_booking_site_payments_fee)

      # return_type
      return_type = opts[:debug_return_type] || 'OnlineBookingSitePaymentsFee'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"BookingApi.update_online_booking_site_payments_fee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#update_online_booking_site_payments_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload availability
    # Uploads availability slots for practitioners at a practice site. This operation will replace all existing availability for the specified practitioner/reason/scenario combinations.  Accepts both ExactIdentifiers (GUID format) and ExternalIds for practitioner and reason identifiers.  Time slots should be provided in HH:MM format (24-hour). 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param upload_availability_request [UploadAvailabilityRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upload_availability(site_slug, upload_availability_request, opts = {})
      upload_availability_with_http_info(site_slug, upload_availability_request, opts)
      nil
    end

    # Upload availability
    # Uploads availability slots for practitioners at a practice site. This operation will replace all existing availability for the specified practitioner/reason/scenario combinations.  Accepts both ExactIdentifiers (GUID format) and ExternalIds for practitioner and reason identifiers.  Time slots should be provided in HH:MM format (24-hour). 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param upload_availability_request [UploadAvailabilityRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def upload_availability_with_http_info(site_slug, upload_availability_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingApi.upload_availability ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling BookingApi.upload_availability"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling BookingApi.upload_availability, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling BookingApi.upload_availability, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'upload_availability_request' is set
      if @api_client.config.client_side_validation && upload_availability_request.nil?
        fail ArgumentError, "Missing the required parameter 'upload_availability_request' when calling BookingApi.upload_availability"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/availability'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(upload_availability_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"BookingApi.upload_availability",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#upload_availability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload booking rules
    # Uploads booking rules for a practice site. This will replace ALL existing booking rules for the site.  **Warning**: This operation will deactivate all existing rules including those generated from PMS sync.  Accepts both ExactIdentifiers (GUID format) and ExternalIds for practitioner and reason identifiers. 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param upload_booking_rules_request [UploadBookingRulesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [BookingRulesUploadResponse]
    def upload_booking_rules(site_slug, upload_booking_rules_request, opts = {})
      data, _status_code, _headers = upload_booking_rules_with_http_info(site_slug, upload_booking_rules_request, opts)
      data
    end

    # Upload booking rules
    # Uploads booking rules for a practice site. This will replace ALL existing booking rules for the site.  **Warning**: This operation will deactivate all existing rules including those generated from PMS sync.  Accepts both ExactIdentifiers (GUID format) and ExternalIds for practitioner and reason identifiers. 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param upload_booking_rules_request [UploadBookingRulesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingRulesUploadResponse, Integer, Hash)>] BookingRulesUploadResponse data, response status code and response headers
    def upload_booking_rules_with_http_info(site_slug, upload_booking_rules_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingApi.upload_booking_rules ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling BookingApi.upload_booking_rules"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling BookingApi.upload_booking_rules, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling BookingApi.upload_booking_rules, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'upload_booking_rules_request' is set
      if @api_client.config.client_side_validation && upload_booking_rules_request.nil?
        fail ArgumentError, "Missing the required parameter 'upload_booking_rules_request' when calling BookingApi.upload_booking_rules"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/booking/rules'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(upload_booking_rules_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BookingRulesUploadResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"BookingApi.upload_booking_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#upload_booking_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload practitioners
    # Uploads practitioner information for a practice site. This operation will update existing practitioners and create new ones based on the external_id provided.  Each practitioner is identified by their external_id from the PMS system. 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param upload_practitioners_request [UploadPractitionersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PractitionersUploadResponse]
    def upload_practitioners(site_slug, upload_practitioners_request, opts = {})
      data, _status_code, _headers = upload_practitioners_with_http_info(site_slug, upload_practitioners_request, opts)
      data
    end

    # Upload practitioners
    # Uploads practitioner information for a practice site. This operation will update existing practitioners and create new ones based on the external_id provided.  Each practitioner is identified by their external_id from the PMS system. 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param upload_practitioners_request [UploadPractitionersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PractitionersUploadResponse, Integer, Hash)>] PractitionersUploadResponse data, response status code and response headers
    def upload_practitioners_with_http_info(site_slug, upload_practitioners_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingApi.upload_practitioners ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling BookingApi.upload_practitioners"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling BookingApi.upload_practitioners, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling BookingApi.upload_practitioners, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'upload_practitioners_request' is set
      if @api_client.config.client_side_validation && upload_practitioners_request.nil?
        fail ArgumentError, "Missing the required parameter 'upload_practitioners_request' when calling BookingApi.upload_practitioners"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/practitioners'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(upload_practitioners_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PractitionersUploadResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"BookingApi.upload_practitioners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#upload_practitioners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update online booking site details, create site if not exists
    # Update online booking details for a site. If the site does not exist, it will be created. 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param update_online_booking_site_details_request [UpdateOnlineBookingSiteDetailsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OnlineBookingSiteDetails]
    def upsert_online_booking_site_details(site_slug, update_online_booking_site_details_request, opts = {})
      data, _status_code, _headers = upsert_online_booking_site_details_with_http_info(site_slug, update_online_booking_site_details_request, opts)
      data
    end

    # Update online booking site details, create site if not exists
    # Update online booking details for a site. If the site does not exist, it will be created. 
    # @param site_slug [String] The Slipstream [slug](https://sqids.org/) that uniquely identifies a physical practice
    # @param update_online_booking_site_details_request [UpdateOnlineBookingSiteDetailsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OnlineBookingSiteDetails, Integer, Hash)>] OnlineBookingSiteDetails data, response status code and response headers
    def upsert_online_booking_site_details_with_http_info(site_slug, update_online_booking_site_details_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingApi.upsert_online_booking_site_details ...'
      end
      # verify the required parameter 'site_slug' is set
      if @api_client.config.client_side_validation && site_slug.nil?
        fail ArgumentError, "Missing the required parameter 'site_slug' when calling BookingApi.upsert_online_booking_site_details"
      end
      if @api_client.config.client_side_validation && site_slug.to_s.length > 20
        fail ArgumentError, 'invalid value for "site_slug" when calling BookingApi.upsert_online_booking_site_details, the character length must be smaller than or equal to 20.'
      end

      pattern = Regexp.new(/^[osl][a-zA-Z0-9]{3,}$/)
      if @api_client.config.client_side_validation && site_slug !~ pattern
        fail ArgumentError, "invalid value for 'site_slug' when calling BookingApi.upsert_online_booking_site_details, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'update_online_booking_site_details_request' is set
      if @api_client.config.client_side_validation && update_online_booking_site_details_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_online_booking_site_details_request' when calling BookingApi.upsert_online_booking_site_details"
      end
      # resource path
      local_var_path = '/sites/{SiteSlug}/booking'.sub('{' + 'SiteSlug' + '}', CGI.escape(site_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_online_booking_site_details_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OnlineBookingSiteDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'azure_auth', 'azure_auth']

      new_options = opts.merge(
        :operation => :"BookingApi.upsert_online_booking_site_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#upsert_online_booking_site_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
